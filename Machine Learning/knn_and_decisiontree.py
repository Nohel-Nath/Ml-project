# -*- coding: utf-8 -*-
"""KNN and DECISIONTREE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GTKs9m_j-V2IgQY8Bu3MliJIXvbC0gCQ
"""

import numpy as np 
import pandas as pd 
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix 
from sklearn.tree import DecisionTreeClassifier 
from sklearn.metrics import accuracy_score 
from sklearn.datasets import load_iris
from sklearn.metrics import  accuracy_score
from sklearn.metrics import  confusion_matrix
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn import tree

#Loading datasets 
iris_data = load_iris() 
iris=pd.DataFrame(iris_data.data)
iris_targets=pd.DataFrame(iris_data.target)

#priting features name of iris data 
print ("Features Name : ", iris_data.feature_names) 

#priting targets name of iris data 
print ("Targets Name : ", iris_data.target_names) 

#shape of datasets 
print ("Dataset Shape: ", iris.shape) 

#first five sample features
print ("Dataset: ",iris.head())  

#first five sample targets
print ("Dataset: ",iris_targets.head())

# features and targets
X = iris_data.data
Y = iris_data.target

# Splitting the dataset into train and test 
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

# Decision tree classifier 
DT = DecisionTreeClassifier(criterion='entropy')

#fitting the training data
DT.fit(X_train, y_train)

# prediction on random data
X=[[6.4,1.8 ,6.6 ,2.1]]
Y_pred=DT.predict(X)
print(Y_pred)

# prediction on X_test (testing data )
Y_pred=DT.predict(X_test)
print(Y_pred)

#Accuray of the model 
print("Accuracy:", accuracy_score(y_test, Y_pred))
#confusion matrix
cm=np.array(confusion_matrix(y_test, Y_pred))
cm

#plot decision tree
fig, ax = plt.subplots(figsize=(15, 15)) #figsize value changes the size of plot
tree.plot_tree(DT,ax=ax,feature_names=['sepal length','sepal width','petal length','petal width'])
plt.show()

import graphviz 
dot_data = tree.export_graphviz(DT, out_file=None, 
                      feature_names=iris_data.feature_names,  
                      class_names=iris_data.target_names,  
                      filled=True, rounded=True,  
                      special_characters=True)  
graph = graphviz.Source(dot_data)  
graph

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier
KNN = KNeighborsClassifier(n_neighbors=5)
KNN.fit(X_train, y_train)

from sklearn.metrics import confusion_matrix
y_pred = DT.predict(X_test)
#Accuray of the model 
print("Accuracy:", accuracy_score(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

error = []

# Calculating error for K values between 1 and 40
for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i = knn.predict(X_test)
    error.append(np.mean(pred_i != y_test))
    print(np.mean(pred_i != y_test))

plt.figure(figsize=(12, 6))
plt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',
         markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')

